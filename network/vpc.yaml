AWSTemplateFormatVersion: 2010-09-09
Description: Sets up VPC
Parameters:
  environment:
    Type: String
    Default: prod

  CidrIp:
    Description: Cidr Ip
    Type: String
    Default: 10.10.0.0

  IpSubnet1:
    Type: String
    Default: 10.10.10.0

  IpSubnet2:
    Type: String
    Default: 10.10.20.0

  IpSubnet3:
    Type: String
    Default: 10.10.30.0

  IpSubnet4:
    Type: String
    Default: 10.10.40.0

Resources:
  InternalAccessSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub "${environment}AllowInternalAccess"
      GroupDescription: Enables access to all VPC protocols and IPs
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: !Sub "${CidrIp}/16"

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Sub "${CidrIp}/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${environment}VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${environment}IGVPC"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "${IpSubnet3}/24"
      AvailabilityZone:
        "Fn::Select":
          - 1
          - "Fn::GetAZs": !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${environment}PublicSubnet1"

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "${IpSubnet4}/24"
      AvailabilityZone:
        "Fn::Select":
          - 2
          - "Fn::GetAZs": !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${environment}PublicSubnet2"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${environment}PublicRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "${IpSubnet1}/24"
      AvailabilityZone:
        "Fn::Select":
          - 1
          - "Fn::GetAZs": !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${environment}PrivateSubnet1"

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "${IpSubnet2}/24"
      AvailabilityZone:
        "Fn::Select":
          - 2
          - "Fn::GetAZs": !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${environment}PrivateSubnet2"

  EIP:
    Type: "AWS::EC2::EIP"
    DependsOn: InternetGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !Sub "${EIP.AllocationId}"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${environment}PrivateRouteTable"

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${environment}VPC"

  VPCCidrBlock:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub "${environment}VPCCidrBlock"

  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${environment}PublicSubnet1"

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${environment}PublicSubnet2"

  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${environment}PrivateSubnet1"

  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${environment}PrivateSubnet2"

  InternalAccessSecurityGroup:
    Value: !Ref InternalAccessSecurityGroup
    Export:
      Name: !Sub "${environment}InternalAccessSecurityGroup"
